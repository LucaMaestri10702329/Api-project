node* word_checker(char *rif, char *word, int dim, node *filtrate, node *temp_bin)
{
    char temp[dim];
    int check = 0;
    int i;
    for(i = 0; i<dim;i++)
    {
        temp[i] = rif[i];
    }
    for( i=0;i<dim;i++)
    {
        temp_bin = NULL;
        if(rif[i]==word[i])
        {
            printf("+");
            filtrate = ricerca_pos_esatta(filtrate,dim,temp_bin,i,word[i]);
        }

        else {
            int j;
            check = 0;
            for(j=0;j<dim;j++)
            {
                if(word[i] == temp[j])
                {
                    printf("|");
                    filtrate = ricerca_non_pos_esatta(filtrate,dim,temp_bin,i,rif[i]);
                    temp[j] = '*';
                    check = 1;
                    break ;
                }
            }
            if(check == 0)
            {
                printf("/");
                int k = 0, pres = 0;
                for(k=0;k<dim;k++)
                {
                    if(word[i] == rif[k])
                    {
                        pres ++;
                    }
                }
                if(pres > 0)
                {
                    filtrate = ricerca_carattere_presente_n_volte(filtrate,dim,temp_bin,word[i],pres);
                }
                else
                    filtrate = ricerca_carattere_non_presente(filtrate,dim,temp_bin,word[i]);

            }

        }
        printf("carattere: %c, numero di parole rimaste %d\n",rif[i], conta_elementi(filtrate));
        stampa_albero(filtrate);
    }
    printf("\n");
    return filtrate;
}