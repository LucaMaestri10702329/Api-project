#include<stdio.h>
#include <stdlib.h>
#include <string.h>

typedef struct _node
{
    char *key;
    struct _node *left;
    struct _node *right;
} node;

node* ricerca_parola (node *bt, char * info)
{
    if((bt == NULL) || (strcmp(info,bt->key) == 0) )
        return bt;
    else
    {
        if(strcmp(info,bt->key)>0)
            return ricerca_parola(bt->right, info);
        else
            return ricerca_parola(bt->left,info);
    }
}

node* insertRec(node *tree, char *input,int dim)
{
    node *new=(node*) malloc(sizeof(node));
    new->key = malloc(dim * sizeof(char));
    strcpy(new->key, input);

    new->left=NULL;
    new->right=NULL;

    if(tree==NULL)
    {
        return new;
    }

    if((strcmp(tree->key, input)>=0))
        tree->left=insertRec(tree->left, input,dim);
    else
        tree->right=insertRec(tree->right, input,dim);

    return tree;
}


void stampa_albero(node* tree)
{
    if(tree == NULL)
    {
        return;
    }


    stampa_albero(tree->left);
    printf("%s\n", tree->key);
    stampa_albero(tree->right);
}

node * binarytree_destroy(node * bt)
{
    if( bt == NULL)
    {
        return NULL;
    }
    else if((bt->left == NULL) && (bt->right == NULL))
    {
        free(bt->key);
        free(bt);
        return NULL;
    }

    else
    {
        bt->left = binarytree_destroy(bt->left);
        bt->right = binarytree_destroy(bt->right);

        free(bt->key);
        free(bt);
        return bt;
    }
}

node* deleteBinaryTree(node* bt)
{
    // Caso base: albero vuoto
    if (bt == NULL) {
        return NULL;
    }

    // elimina prima il sottoalbero sinistro e destro (Postorder)
    deleteBinaryTree(bt->left);
    deleteBinaryTree(bt->right);

    // elimina il nodo corrente dopo aver eliminato il suo sottoalbero sinistro e destro
    free(bt->key);
    free(bt);

    // imposta root come null prima di restituire
    return NULL;
}

node * binarytree_min(node * bt)
{
    if(bt == NULL)
        return NULL;
    else if(bt->left == NULL)
        return bt;
    else
    {
        node * min = binarytree_min(bt->left);
        return min;
    }
}

node* binarytree_delete(node* bt, char *info)
{
    if(bt == NULL)
        return NULL;
    else if(strcmp(bt->key,info)>1)
    {
        bt->left = binarytree_delete(bt->left, info);
        return bt;
    }
    else if(strcmp(info, bt->key)>1)
    {
        bt->right = binarytree_delete(bt->right,info);
        return bt;
    }

    else {
        node * min_right;
        if((bt->right == NULL))
        {
            free(bt->key);
            free(bt);
            return NULL;
        }
        if(bt->right == NULL)
        {
            node * alias;
            alias = bt->left;
            free(bt->key);
            free(bt);
            return alias;
        }
        if(bt->left == NULL)
        {
            node * alias;
            alias = bt->right;
            free(bt->key);
            free(bt);
            return alias;
        }

        min_right = binarytree_min(bt->right);
        strcpy(bt->key,min_right->key);

        bt->right = binarytree_delete(bt->right, min_right->key);
        return bt;
    }
}

int conta_elementi(node *bt)
{
    int count_left, count_right;
    if(bt == NULL)
        return 0;
    count_left = conta_elementi(bt->left);
    count_right = conta_elementi(bt->right);
    return 1 + count_left + count_right;
}

node* ricerca_pos_esatta(node* tree,int dim,node *test,int pos, char c)
{
    if(tree == NULL)
    {
        return test;
    }
    else
    {
        if(tree->key[pos] == c)
        {
            test = insertRec(test,tree->key,dim);
        }
        test=ricerca_pos_esatta(tree->left, dim,test,pos,c);
        test = ricerca_pos_esatta(tree->right,dim,test,pos,c);

    }
    return test;

}

node* ricerca_non_pos_esatta(node* tree,int dim,node *test,int pos, char c)
{
    if(tree == NULL)
    {
        return test;
    }
    else
    {
        if(tree->key[pos] != c)
        {
            test = insertRec(test,tree->key,dim);
        }
        test=ricerca_non_pos_esatta(tree->left, dim,test,pos,c);
        test = ricerca_non_pos_esatta(tree->right,dim,test,pos,c);
    }
    return test;
}

node* ricerca_carattere_non_presente(node* tree,int dim,node *test,char c)
{
    if(tree == NULL)
    {
        return test;
    }
    else
    {
        int found = 0;
        int i;
        for(i=0;i<dim;i++)
        {
            if(tree->key[i]==c)
                found = 1;
        }

        if(found != 1)
        {
            test = insertRec(test,tree->key,dim);

        }
        test=ricerca_carattere_non_presente(tree->left, dim,test,c);
        test = ricerca_carattere_non_presente(tree->right,dim,test,c);

    }
    return test;

}

node* ricerca_carattere_presente_n_volte(node* tree,int dim,node *test,char c, int n_volte)
{
    if(tree == NULL)
    {
        return test;
    }
    else
    {
        int i;
        int pres = 0;
        for(i = 0; i < dim; i++)
        {
            if(tree->key[i] == c)
                pres++;
        }
        if(pres == n_volte)
            test = insertRec(test,tree->key,dim);
        test=ricerca_carattere_presente_n_volte(tree->left, dim,test,c,n_volte);
        test = ricerca_carattere_presente_n_volte(tree->right,dim,test,c,n_volte);

    }
    return test;
}

node* word_checker(char *rif, char *word, int dim, node *filtrate, node *temp_bin)
{
    char temp[dim];
    int check = 0;
    int i;
    for(i = 0; i<dim;i++)
    {
        temp[i] = rif[i];
    }
    for( i=0;i<dim;i++)
    {
        temp_bin = NULL;
        if(rif[i]==word[i])
        {
            printf("+");
            filtrate = ricerca_pos_esatta(filtrate,dim,temp_bin,i,word[i]);
        }

        else {
            int j;
            check = 0;
            for(j=0;j<dim;j++)
            {
                if(word[i] == temp[j])
                {
                    printf("|");
                    filtrate = ricerca_non_pos_esatta(filtrate,dim,temp_bin,i,rif[i]);
                    temp[j] = '*';
                    check = 1;
                    break ;
                }
            }
            if(check == 0)
            {
                printf("/");
                int k = 0, pres = 0;
                for(k=0;k<dim;k++)
                {
                    if(word[i] == rif[k])
                    {
                        pres ++;
                    }
                }
                if(pres > 0)
                {
                    filtrate = ricerca_carattere_presente_n_volte(filtrate,dim,temp_bin,word[i],pres);
                }
                else
                    filtrate = ricerca_carattere_non_presente(filtrate,dim,temp_bin,word[i]);

            }

        }
        //printf("carattere: %c, numero di parole rimaste %d\n",rif[i], conta_elementi(filtrate));
        //stampa_albero(filtrate);
    }
    printf("\n");
    return filtrate;
}














int main()
{
    unsigned int dim, err, tent, check2 = 0,check1=0;
    node * bt = NULL;
    node * filtrate = NULL;
    node * temp = NULL;
    //leggo il numero di parole da leggere
    err=fscanf(stdin, "%d\n", &dim);
    printf("Dimensione delle parole: %d\n", dim);
    dim++;


    char c ;
    char *p = (char*) malloc(dim*sizeof(char));
    while(1)
    {

        fgets(p,dim,stdin);
        c = getchar_unlocked();
        //printf("%s\n",&(*p));

        if(p[0] == '+')
        {
            while(getchar_unlocked()!='\n')
            {
                //printf("_%c",c);
            }
            //printf("\n");
            break;
        }

        else
        {
            bt = insertRec(bt,p,dim);
            filtrate = insertRec(filtrate,p,dim);
        }

        //bt = binarytree_destroy(bt);


    }

    printf("Stampa dell'albero: \n");
    stampa_albero(bt);
    char *par_let = malloc(dim*sizeof(char));

    while(check1==0) {
        //ripristino check2

        check2 = 0;
        check1 = 0;


        //leggo la parola di riferimento
        //char *par = malloc(dim*sizeof(char));
        fgets(p, dim, stdin);
        c = getchar_unlocked();
        if(c==EOF)
        {
            check1 = 1;
            check2 = 3;
        }
        else
        {


            printf("Parola da indovinare: %s\n", &(*p));

            //leggo il numero di tentativi
            err = fscanf(stdin, "%d\n", &tent);
            printf("Numero tentativi: %d\n", tent);


            while (check2 != 3) {
                fscanf(stdin, "%s\n", &(*par_let));
                //printf("%s\n",&(*par_let));
                if (par_let[0] == '+') {

                    if (par_let[1] == 's')
                    {
                        printf("%s\n",par_let);
                        if(filtrate == NULL)
                            printf("Vuoto\n");
                        else
                            stampa_albero(filtrate);
                    }

                    else {
                        if (par_let[1] == 'i') {
                            //printf("%s\n", &(*par_let));
                            if (check2 == 1)
                                check2 = 0;
                            else
                                check2 = 1;
                        }
                    }
                    if (par_let[1] == 'n') {
                        check2 = 3;
                        printf("\nFine partita\n");
                    }

                } else {
                    if (check2 == 1) {
                        bt = insertRec(bt, par_let, dim);
                        filtrate = insertRec(filtrate, par_let, dim);
                    } else {
                        if (ricerca_parola(bt, par_let) == NULL)
                            printf("not exists\n");
                        else {
                            if (strcmp(p, par_let) == 0) {
                                printf("ok\n");
                                check2 = 3;
                            } else {
                                filtrate = word_checker(p, par_let, dim - 1, filtrate,temp);
                                printf("%d\n", conta_elementi(filtrate));
                                tent--;
                                if(tent == 0)
                                {
                                    printf("ko\n");
                                }
                            }
                        }
                    }

                }
            }


        }

    }
    deleteBinaryTree(bt);
    free(p);
    return 0;
}
